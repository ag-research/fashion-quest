# NOTE: Games are configured using YAML: http://www.yaml.org
---

# Basic game configuration
#

title: Cloak of Darkness
width: 600
height: 600
image_height: 200
resizable: true

# Command abbreviations
#

command_abbreviations:
  n: "go north"
  s: "go south"
  e: "go east"
  w: "go west"
  u: "go up"
  d: "go down"

# Words that should be ignored during parsing
#

garbage_words:
- "the"
- "that"
- "this"
- "at"
- "to"

# Global synonyms
#

global_synonyms:
  using: "with"
  examine: "look"

# Scoring components
#

scoring:
  cloak_on_hook:
    points: 1

  message_read:
    points: 1

# What to display when game starts
#

startup_message: "Hurrying through the rainswept November night, you're glad to see the bright lights of the Opera House. It's surprising that there aren't more people about but, hey, what do you expect in a cheap demo game...?\n
  \n
  Cloak of Darkness\n
  A Basic IF Demonstration\n
  Written using Fashion Quest by Mike Cantelon (c) 2009\n
  \n"

# Logic that defines the initial state of game elements
#

setup_logic: |

  # Create game state variable to keep track of how much the message in the
  # game is trampled
  @game.state['trampling'] = 0

  # Start player in the foyer

  player = @game.create(Player)
  player.location = 'foyer'
  @game.player = player

  # Define props

  cloak = @game.create(Prop, 'cloak')
  cloak.name = 'velvet cloak'
  cloak.aliases = ['handsome', 'dark', 'black', 'velvet', 'satin']
  cloak.description = "A handsome cloak, of velvet trimmed with satin, and slightly spattered with raindrops. Its blackness is so deep that it almost seems to suck light from the room."
  cloak.location = 'player'
  cloak.traits = {
    'visible' => true,
    'wearable' => true,
    'portable' => true
  }
  @game.props['cloak'] = cloak

  hook = @game.create(Prop, 'hook')
  hook.name = 'small brass hook'
  hook.aliases = ['small', 'brass', 'peg']
  hook.description = 'A hook on which to hang a garment.'
  hook.location = 'cloakroom'
  hook.traits = {
    'visible' => false,
    'portable' => false,
    'supports' => true,
    'supports_only' => ['cloak']
  }
  @game.props['hook'] = hook

  message = @game.create(Prop, 'message')
  message.aliases = ['sawdust']
  message.location = 'bar'
  message.events = {
    'on_read' => "@game.set_score('message_read')\n\
      @game.over = true"
  }
  message.traits = {
    'visible' => false,
    'portable' => false,
    'text' => "The message, neatly marked in the sawdust, reads...\n
       *** You have won ***\n"
  }
  @game.props['message'] = message

  # Define locations

  cloakroom = @game.create(Location, 'cloakroom')
  cloakroom.exits = {
    'east' => {
      'destination' => 'foyer'
    },
  }
  cloakroom.description = "The walls of this small room were clearly once lined with hooks, though now only one remains. The exit is a door to the east.\n"
  @game.locations['cloakroom'] = cloakroom

  bar = @game.create(Location, 'bar')
  bar.exits = {'north' => {'destination' => 'foyer'}}
  bar.description = "The bar, much rougher than you'd have guessed after the opulence of the foyer to the north, is completely empty. There seems to be some sort of message scrawled in the sawdust on the floor.\n"
  bar.dark = 'safe'
  bar.command_conditions = {
    '*' => "if @id !='look' && @id != 'go' && @id != 'quit' && @game.locations[@game.player.location].dark\n
      @game.state['trampling'] = @game.state['trampling'] + 1\n
      {\n
        'message' => \"In the dark? You could easily disturb something!\\n\",\n
        'success' => false\n
      }\n
    else\n
      {'success' => true}\n
    end"
  }

  @game.locations['bar'] = bar

  foyer = @game.create(Location, 'foyer')
  foyer.exits = {
    'south' => {'destination' => 'bar'},
    'west' => {
      'destination' => 'cloakroom'
     },
    'north' => {
      'condition' => "{
          'message' => \"You've only just arrived, and besides, the weather outside seems to be getting worse.\\n\",
          'success' => false
        }"
    }
  }
  foyer.description = "You are standing in a spacious hall, splendidly decorated in red and gold, with glittering chandeliers overhead. The entrance from the street is to the north, and there are doorways south and west.\n"
  @game.locations['foyer'] = foyer

startup_logic: |

  # Load standard commands that should be allowed in the game

  @cli.standard_commands = ['drop', 'get', 'go', 'inventory', 'look', 'put', 'quit', 'read', 'remove', 'score', 'wear']
  @cli.initialize_commands()

  # Define transitions

  # Transitions act as rules within a game. We define the following rules:
  # 1. If the player has the cloak or the cloak is in the bar, the bar should be
  #    dark.
  # 2. If the player doesn't have the cloak and the cloak isn't in the bar, the
  #    bar shouldn't be dark.
  # 3. If the cloak is hanging on the hook, add to player's score and indicate
  #    this when the player looks at the hook.
  # 4. If the cloak isn't hanging on the hook, indicate this when the player
  #    looks at the hook.
  @game.transitions = {
    "conditions"=> {
      ["@props['cloak'].location == 'player' || @props['cloak'].location == 'bar'"] \
        => ["bar_dark"],
      ["@props['cloak'].location != 'player' && @props['cloak'].location != 'bar'"] \
        => ["bar_light"],
      ["@props['hook'].traits['supporting'] && \
        @props['hook'].traits['supporting'].index('cloak')"] \
        => ["coat_hung"],
      ["!@props['hook'].traits['supporting'] || \
        !@props['hook'].traits['supporting'].index('cloak')"] \
        => ["coat_not_hung"]
    },
    "outcomes"=> {
      "bar_dark"  => "@locations['bar'].dark = 'safe'\n\
        ''\n",
      "bar_light" => "@locations['bar'].dark = false\n\
        ''\n",
      "coat_hung" => %!
        @props['hook'].description = "It's just a small brass hook, with a cloak on it, screwed to the wall."\n
        @game.set_score('cloak_on_hook')\n
      !,
      "coat_not_hung" => %!
        @props['hook'].description = "It's just a small brass hook, screwed to the wall."\n
        ''
      !
    }
  }

  # Command conditions

  # make helper function that prevents user from dropping the cloak anywhere
  # but the cloakroom
  def (@game.helpers).drop_condition(game, prop)

    if prop.id == 'cloak' && game.player.location != 'cloakroom'
      {
        'message' => "This isn't the best place to leave a smart cloak lying around.\n",
        'success' => false
      }
    end
  end

  # set command condition for "drop" to our helper function
  @cli.commands['drop'].condition = "@game.helpers.drop_condition(@game, prop)"

  # make helper function that tramples message if the user attempts to go
  # anywhere except the north exit in a dark room
  def (@game.helpers).go_condition(game, arg)

    if game.locations[game.player.location].dark and arg['direction'] != 'north'
      game.state['trampling'] = game.state['trampling'] + 2
      return {
        'message' => "Blundering around in the dark isn't a good idea!\n",
        'success' => false
      }
    end
  end

  # set command condition for "go" to our helper function
  @cli.commands['go'].condition = "@game.helpers.go_condition(@game, arg)"

  # make helper function that prevents message from being read in certain
  # conditions
  def (@game.helpers).read_condition(game, arg)

    prop = arg['noun']

    if prop.id == 'message' && game.player.location == 'bar' && game.state['trampling'] > 2
      game.over = true
      {
        'message' => "The message has been carelessly trampled, making it difficult to read. You can just distinguish the words...\n\nYou have lost.\n\n",
        'success' => false
      }
    end
  end

  # set command condition for "read" to our helper function
  @cli.commands['read'].condition = "@game.helpers.read_condition(@game, arg)"

  # Start game by issueing "look" command
  @cli.initial_command('look')
