---
syntax:
- "l"
- "look"
- "look <prop:noun>"
- "look <character:noun>"
- "look <door:noun>"

logic: |

  noun = arg['noun']

  noun = '' if not noun

  output = ''

  if not noun.empty?

    description = ''

    # If attempting to look at a character, check for description
    if characters[noun]
      if characters[noun].dead == true
        description = "#{characters[noun].noun_cap} appears to be dead.\n"
      elsif characters[noun].description
        description = characters[noun].description + "\n"
      end
    end

    # If attempting to look at an prop, check for description and trigger on_look event
    if props[noun]
      if props[noun].description
        description = props[noun].description + "\n"
      end
      description << game.event(props[noun], 'on_look')
    end

    # If attempting to look at a door, check for descripton
    if doors[noun]
      if doors[noun].description
        description = doors[noun].description + "\n"
      end
    end

    # If no description was found, inform user
    if description == ''
      description = "You see nothing special.\n"
    end

    output = description

  else

    # Show image, if any
    if FileTest.exists?(locations[location].image_file)
      @image_stack.height = game.config['image_height']
      @image_stack.clear { @image_stack.image locations[location].image_file }
      @output_stack.height = (game.config['height'] - game.config['image_height'])
    else
      @image_stack.height = 0
      @image_stack.clear { }
      @output_stack.height = game.config['height']
    end

    output = locations[location].describe(doors, props, characters, player.has_lit_item)

  end

  output
